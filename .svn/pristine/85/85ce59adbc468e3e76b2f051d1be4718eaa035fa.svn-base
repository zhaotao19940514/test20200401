/**
 * @Title RechargeManagerImpl.java
 * @Package cn.com.taiji.css.manager.customerservice.finance
 * @Description TODO
 * @author yaonanlin
 * @date 2018年6月25日 下午5:16:38
 * @version V1.0
 */
package cn.com.taiji.css.manager.customerservice.card;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Lists;

import cn.com.taiji.common.manager.ManagerException;
import cn.com.taiji.common.model.dao.LargePagination;
import cn.com.taiji.common.pub.StringTools;
import cn.com.taiji.css.entity.User;
import cn.com.taiji.css.manager.abstractmanager.AbstractDsiCommManager;
import cn.com.taiji.css.manager.administration.agency.AgencyVarifyManager;
import cn.com.taiji.css.model.customerservice.card.UnlossRequest;
import cn.com.taiji.dsi.manager.comm.client.InqueryBinService;
import cn.com.taiji.dsi.manager.comm.client.MaintenanceBinService;
import cn.com.taiji.dsi.model.comm.protocol.inquire.CardInfoQueryRequest;
import cn.com.taiji.dsi.model.comm.protocol.inquire.CardInfoQueryResponse;
import cn.com.taiji.dsi.model.comm.protocol.maintenance.CardStatusChangeRequest;
import cn.com.taiji.dsi.model.comm.protocol.maintenance.CardStatusChangeResponse;
import cn.com.taiji.qtk.entity.AccountCardBalanceOperate;
import cn.com.taiji.qtk.entity.CancelledCardDetail;
import cn.com.taiji.qtk.entity.CardInfo;
import cn.com.taiji.qtk.entity.CcbConsumeDetails;
import cn.com.taiji.qtk.entity.CcbReChargeDetails;
import cn.com.taiji.qtk.entity.LkfInConsumeDetailsOl;
import cn.com.taiji.qtk.repo.jpa.AccountCardBalanceOperateRepo;
import cn.com.taiji.qtk.repo.jpa.CancelledCardDetailRepo;
import cn.com.taiji.qtk.repo.jpa.CardInfoRepo;
import cn.com.taiji.qtk.repo.jpa.CcbConsumeDetailsRepo;
import cn.com.taiji.qtk.repo.jpa.CcbReChargeDetailsRepo;
import cn.com.taiji.qtk.repo.jpa.LkfInConsumeDetailsOlRepo;

/**
 * @ClassName UnlossManagerImpl.java
 * @author zhaotao
 * @Description 
 * @date2018年12月24日
 */
@Service
public class UnlossManagerImpl extends AbstractDsiCommManager implements UnlossManager{

	@Autowired
	private CardInfoRepo cardInfoRepo;
	@Autowired
	private InqueryBinService inqueryBinService;
	@Autowired
	private MaintenanceBinService maintenanceBinService;
	@Autowired
	private AgencyVarifyManager agencyVarifyManager;
	@Autowired
	private CcbConsumeDetailsRepo ccbConsumeDetailsRepo;
	@Autowired
	private CcbReChargeDetailsRepo ccbReChargeDetailsRepo;
	@Autowired
	private CancelledCardDetailRepo cancelledCardDetailRepo;
	@Autowired
	private AccountCardBalanceOperateRepo accountCardBalanceOperateRepo;
	@Autowired
	private StorageImportManager storageImportManager;
	@Autowired
	private LkfInConsumeDetailsOlRepo lkfInConsumeDetailsOlRepo;
//	@Autowired
//	private CancelledTempCardDetailRepo cancelledTempCardDetailRepo;
	
	
	@Override
	public LargePagination<CardInfo> queryPage(UnlossRequest queryModel,User user) throws ManagerException {
		queryModel.validate();
		List<CardInfo> listCard = new ArrayList<CardInfo>();
		listCard = agencyCheck(queryModel,user);
		LargePagination<CardInfo> list = new LargePagination<CardInfo>();
		if(listCard.size()==0) {
			list=null;
		}else {
			list.setResult(listCard);
		}
		return list;
	}
	private List<CardInfo> agencyCheck(UnlossRequest queryModel, User user) throws ManagerException {
		List<CardInfo> listCard = new ArrayList<CardInfo>();
		CardInfo cardInfo = null;
		if (StringTools.hasText(queryModel.getCardId())) {
			cardInfo = cardInfoRepo.findByCardId(queryModel.getCardId());
			boolean falg =false;
			try {
				falg = agencyVarifyManager.varifyAgency(user, cardInfo);
			} catch (Exception e) {
				e.printStackTrace();
				throw new ManagerException("渠道校验失败："+e.getMessage());
			}
			if(falg) {
				if(null!=cardInfo) {
					listCard.add(cardInfo);
				}
			}else {
				throw new ManagerException("当前渠道无权操作此卡");
			}
			
		}else if (StringTools.hasText(queryModel.getVehicleId())) {
			List<CardInfo> cardList = cardInfoRepo.listByVehicleId(queryModel.getVehicleId());
			if(cardList.size()>0) {
				boolean falg =false;
				for(CardInfo info:cardList) {
					
					try {
						falg = agencyVarifyManager.varifyAgency(user, info);
					} catch (Exception e) {
						e.printStackTrace();
						throw new ManagerException("渠道校验失败："+e.getMessage());
					}
					if(falg) {
						if(null!=info) {
							listCard.add(info);
						}
					}
				}
				if(listCard.size()==0) {
					throw new ManagerException("当前渠道无权操作此卡");
				}
			}
			
		}
		return listCard;

	}


	@Override
	public CardStatusChangeResponse doUnLossCard(@Valid String id,User user) throws Exception {
		
		CardInfoQueryRequest cardInfoQueryRequest =  new CardInfoQueryRequest();
		CardInfoQueryResponse cardInfoQueryResponse =null;
		super.commSet(cardInfoQueryRequest,user);
		cardInfoQueryRequest.setCardId(id);
		
		CardStatusChangeRequest cardStatusChangeRequest = new CardStatusChangeRequest();
		CardStatusChangeResponse cardStatusChangeResponse = new CardStatusChangeResponse();
		super.commSet(cardStatusChangeRequest,user);
		cardStatusChangeRequest.setCardId(id);
		try {
			cardInfoQueryResponse = inqueryBinService.cardInfoQuery(cardInfoQueryRequest);
		} catch (Exception e) {
			cardStatusChangeResponse.setMessage("卡内部校验出错,请联系管理员.");
			return cardStatusChangeResponse;
		}
		if(cardInfoQueryResponse.getStatus()==1) {
			int status = cardInfoQueryResponse.getCardStatus();
			if(status == 6) {
				cardStatusChangeRequest.setStatus(1);
				cardStatusChangeResponse = maintenanceBinService.cardStatusChange(cardStatusChangeRequest);
			}else {
				cardStatusChangeResponse.setMessage("此卡不能办理解挂业务,卡状态为挂失才能办理解挂。");
			}
		}else {
			cardStatusChangeResponse.setMessage("未查询到该卡信息,请检查此卡是否已开卡。");
		}
		
		return cardStatusChangeResponse;
	}



	@Override
	public CardInfo findById(String id) {
		return cardInfoRepo.findByCardId(id);
	}
	@Override
	public void readFileContent(HttpServletRequest request) throws IOException {
		System.out.println("开始读取文件...");
		String url = request.getSession().getServletContext().getRealPath("") ;
		String pathname = url+"tempFile/Qtzl_consume.txt";
		File file = new File(pathname);
		BufferedReader bufferedReader = null;
		String line = null;
		List<CcbConsumeDetails> result = Lists.newArrayList();
		System.out.println("读取成功，开始导入..");
		try {
			bufferedReader = new BufferedReader(new FileReader(file));
			int i = 0;
			while((line = bufferedReader.readLine()) !=null){
				if(StringTools.hasText(line.trim())){
					String strs[]  =line.split("\\|!"); 
					CcbConsumeDetails details = new CcbConsumeDetails();
					details.setClearTargetDate(strs[0]);
					details.setServiceProvinceid(strs[1]);
					details.setIssuerId(strs[2]);
					details.setMessageId(strs[3]);
					details.setCount(strs[4]);
					details.setAmount(strs[5]);
					details.setTransId(strs[6]);
					details.setTime(strs[7]);
					details.setFee(Long.parseLong(strs[8]));
					details.setVehicleType(strs[9]);
					details.setExType(strs[10]);
					details.setExnetNo(strs[11]);
					details.setExName(strs[12]);
					details.setExTollNo(strs[13]);
					details.setExLaneNo(strs[14]);
					details.setExTime(strs[15]);
					details.setEnType(strs[16]);
					details.setEnnetNo(strs[17]);
					details.setEnName(strs[18]);
					details.setEnTollNo(strs[19]);
					details.setEnLaneNo(strs[20]);
					details.setEnTime(strs[21]);
					details.setCardType(Integer.parseInt(strs[22]));
					details.setNetNo(strs[23]);
					details.setCardId(strs[24]);
					details.setLicense(strs[25]);
					details.setPreBalance(Long.parseLong(strs[26]));
					details.setPostBalance(Long.parseLong(strs[27]));
					details.setTac(strs[28]);
					details.setTransType(strs[29]);
					details.setTerminalNo(strs[30]);
					details.setTerminalTransNo(strs[31]);
					details.setObuId(strs[32]);
					result.add(details);
					if(result.size()%100000 == 0){
						System.out.println(i+"---"+result.size());
						ccbConsumeDetailsRepo.saveAll(result);
						result = Lists.newArrayList();
						i++;
					}
				}
			}
			if(result.size()!=0) {
				ccbConsumeDetailsRepo.saveAll(result);
				//完成标识
				CcbConsumeDetails details = new CcbConsumeDetails();
				ccbConsumeDetailsRepo.save(details);
				System.out.println("导入成功....");
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			bufferedReader.close();
		}
		

		
	}
	@Override
	public void readReChargeFileContent(HttpServletRequest request) throws IOException {

		System.out.println("开始读取文件...");
		String url = request.getSession().getServletContext().getRealPath("") ;
		String pathname = url+"tempFile/Qtzl_journal.txt";
		File file = new File(pathname);
		BufferedReader bufferedReader = null;
		String line = null;
		List<CcbReChargeDetails> result = Lists.newArrayList();
		System.out.println("读取成功，开始导入..");
		try {
			bufferedReader = new BufferedReader(new FileReader(file));
			int i = 0;
			while((line = bufferedReader.readLine()) !=null){
				if(StringTools.hasText(line.trim())){
					String strs[]  =line.split("\\|!"); 
					CcbReChargeDetails details = new CcbReChargeDetails();
					details.setRechargeId(strs[0]);
					details.setActualBalance(Long.parseLong(strs[1]));
					details.setGiveBalance(Long.parseLong(strs[2]));
					details.setFee(Long.parseLong(strs[3]));
					details.setCardId(strs[4]);
					details.setTradeTime(strs[5]);
					details.setAgencyType(strs[6]);
					details.setServicehallId(strs[7]);
					details.setAgencyId(strs[8]);
					details.setTradeStatus(Integer.parseInt(strs[9]));
					details.setIsconfirmTrade(Integer.parseInt(strs[10]));
					details.setPreBalance(Long.parseLong(strs[11]));
					result.add(details);
					if(result.size()%100000 == 0){
						System.out.println(i+"---"+result.size());
						ccbReChargeDetailsRepo.saveAll(result);
						result = Lists.newArrayList();
						i++;
					}
				}
			}
			if(result.size()!=0) {
				ccbReChargeDetailsRepo.saveAll(result);
				//完成标识
				CcbConsumeDetails details = new CcbConsumeDetails();
				ccbConsumeDetailsRepo.save(details);
				System.out.println("导入成功....");
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			bufferedReader.close();
		}
		
		
	}
	@Override
	public void readCCBCancelContent(HttpServletRequest request) {
		
		System.out.println("开始读取文件...");
		String url = request.getSession().getServletContext().getRealPath("") ;
		String pathname = url+"tempFile/etc_register.2019023.txt";
		File file = new File(pathname);
		BufferedReader bufferedReader = null;
		String line = null;
		List<CancelledCardDetail> result = Lists.newArrayList();
		System.out.println("读取成功，开始导入..");
		try {
			bufferedReader = new BufferedReader(new FileReader(file));
			int i = 0;
			String cancelTime = null;
			SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			Date date = null;
			while((line = bufferedReader.readLine()) !=null){
				if(StringTools.hasText(line.trim())){
					Calendar calendar = Calendar.getInstance();
					String strs[]  =line.split("\\|"); 
					CardInfo cardInfo = cardInfoRepo.findByCardId(strs[0]);
					CancelledCardDetail details = cancelledCardDetailRepo.findByCardId(strs[0]);
					if(null==cardInfo) {
						continue;
					}
					System.out.println(strs[0]);
					details.setCardId(strs[0]);
					cancelTime = strs[1].substring(0,4)+"-"+strs[1].substring(4,6)+"-"+strs[1].substring(6,8)+" 18:00:00";
					details.setCancellationTime(strs[1]);
					try {
						date = sdf.parse(cancelTime);
						
					} catch (Exception e) {
						e.printStackTrace();
					}
					calendar.setTime(date);
					details.setCreateTime(calendar);
					details.setCardType(cardInfo.getCardType()/100);
					details.setAgencyId(cardInfo.getAgencyId());
					result.add(details);
					if(result.size()%1000 == 0){
						System.out.println(+i+"---"+result.size());
						cancelledCardDetailRepo.saveAll(result);
						result = Lists.newArrayList();
						i++;
					}
				}
			}
			if(result.size()!=0) {
				cancelledCardDetailRepo.saveAll(result);
				System.out.println("导入成功....");
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}finally {
			try {
				bufferedReader.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
	@Override
	public void deleteCancelDetail(String cardId) throws ManagerException {
		CancelledCardDetail detail = cancelledCardDetailRepo.findByCardId(cardId);
		AccountCardBalanceOperate operate =  accountCardBalanceOperateRepo.findByCardId(cardId);
		if(null==detail) {
			throw new ManagerException("未查询到注销信息");
		}
		if(null!=operate) {
			accountCardBalanceOperateRepo.delete(operate);
		}
		cancelledCardDetailRepo.delete(detail);
	}
	@Override
	@Transactional
	public void readLkfContent(HttpServletRequest request) {
		
		String url = request.getSession().getServletContext().getRealPath("") ;
		String pathname = url+"tempFile/year.xlsx";
		File f =new File(pathname);
		List<LkfInConsumeDetailsOl> batList;
		try {
			System.out.println("----------------start-------------");
			batList = storageImportManager.getLines(f);
			logger.info("count:{}",batList.size());
			lkfInConsumeDetailsOlRepo.persistAll(batList);
			System.out.println("----------------end-------------");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		}
//	@Override
//	public void exportOutProvince(HttpServletRequest request) {
//		System.out.println("开始读取文件...");
//		String url = request.getSession().getServletContext().getRealPath("") ;
//		String pathname = url+"tempFile/transaciontId2.txt";
//		File file = new File(pathname);
//		BufferedReader bufferedReader = null;
//		String line = null;
//		List<CancelledTempCardDetail> result = Lists.newArrayList();
//		System.out.println("读取成功，开始导入..");
//		try {
//			bufferedReader = new BufferedReader(new FileReader(file));
//			int i = 0;
//			Date date = null;
//			while((line = bufferedReader.readLine()) !=null){
//				if(StringTools.hasText(line.trim())){
//					CancelledTempCardDetail details = new CancelledTempCardDetail();
//					String strs[]  =line.split(","); 
//					System.out.println(strs[0]);
//					details.setCardId(strs[0]);
//					result.add(details);
//					if(result.size()%10000 == 0){
//						System.out.println(+i+"---"+result.size());
//						cancelledTempCardDetailRepo.saveAll(result);
//						result = Lists.newArrayList();
//						i++;
//					}
//				}
//			}
//			if(result.size()!=0) {
//				cancelledTempCardDetailRepo.saveAll(result);
//				System.out.println("导入成功....");
//			}
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}finally {
//			try {
//				bufferedReader.close();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//		}
//	}
		
		
}

