/**
 * @Title RechargeController.java
 * @Package cn.com.taiji.css.web.customerservice.finance
 * @Description TODO
 * @author yaonanlin
 * @date 2018年6月25日 下午5:14:54
 * @version V1.0
 */
package cn.com.taiji.css.web.customerservice.card;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.com.taiji.common.manager.ManagerException;
import cn.com.taiji.common.manager.net.http.HttpMimeResponseHelper;
import cn.com.taiji.common.model.dao.LargePagination;
import cn.com.taiji.css.entity.dict.CssServiceLogType;
import cn.com.taiji.css.manager.LoginHelper;
import cn.com.taiji.css.manager.customerservice.card.AppCardStatusChangeResponse;
import cn.com.taiji.css.manager.customerservice.card.CancelManager;
import cn.com.taiji.css.model.customerservice.card.CancelRequest;
import cn.com.taiji.css.model.customerservice.card.PreCancelRequest;
import cn.com.taiji.css.web.MyLogController;
import cn.com.taiji.dsi.model.comm.protocol.finance.CardCancelResponse;
import cn.com.taiji.qtk.entity.CardInfo;
import cn.com.taiji.qtk.entity.CustomerInfo;
import cn.com.taiji.qtk.entity.dict.AccountCardBalanceOperateType;
import cn.com.taiji.qtk.entity.dict.BankType;
import cn.com.taiji.qtk.entity.dict.CardUploadStatus;
import cn.com.taiji.qtk.entity.dict.CustomerIDType;
import cn.com.taiji.qtk.entity.dict.VehiclePlateColorType;
import cn.com.taiji.qtk.repo.jpa.AccountCardBalanceOperateRepo;

/**
 * @ClassName CancelController.java
 * @author zhaotao
 * @Description 
 * @date2018年12月24日
 */
@Controller
@RequestMapping("/customerservice/card/cancel")
public class CancelController extends MyLogController {
	private final String prefix = "customerservice/card/cancel/";
	
	@Autowired
	private CancelManager cancelManager;
	@Autowired
	private AccountCardBalanceOperateRepo accountCardBalanceOperateRepo;
	

	@RequestMapping(value = "/manage", method = RequestMethod.GET)
	public String manageGet(@ModelAttribute("queryModel") CancelRequest queryModel, Model model)
	{
		model.addAttribute("vehiclePlateColorType", VehiclePlateColorType.values());
		return prefix+"manage";
	}

	@RequestMapping(value = "/manage", method = RequestMethod.POST)
	public String managePost(@ModelAttribute("queryModel") CancelRequest queryModel, Model model, HttpServletRequest request) throws ManagerException
	{
		
		LargePagination<CardInfo> pagn = cancelManager.queryPage(queryModel,LoginHelper.getLoginUser(request));
		model.addAttribute("vehiclePlateColorType", VehiclePlateColorType.values());
		model.addAttribute("CustomerIDType",CustomerIDType.values());
		model.addAttribute("CardUploadStatus",CardUploadStatus.values());
		model.addAttribute("pagn", pagn);
		if(LoginHelper.getLoginUser(request).getRole().getName().equals("开发测试")) {
			model.addAttribute("forceFlag",1);
		}
		
		return prefix+"queryResult";
	}
	
	@RequestMapping(value = "/edit/{id}", method = RequestMethod.GET)
	public String setupEdit(@PathVariable("id") String cardId,@ModelAttribute("pageModel") CancelRequest queryModel, HttpServletRequest request, Model model) throws ManagerException
	{
		CardInfo cardInfo = cancelManager.findById(cardId);
		CustomerInfo customerInfo = cancelManager.getCusInfo(cardInfo.getCustomerId());
		if(customerInfo!=null && customerInfo.getCustomerType()!=null && customerInfo.getCustomerName()!=null ) {
			boolean jhFlag = jhCancelFlag(model, cardInfo);
			model.addAttribute("AccountCardBalanceOperateType",AccountCardBalanceOperateType.getCancelEnums());
			model.addAttribute("bankType",BankType.getBankEnums());
			model.addAttribute("type", queryModel.getType());
			model.addAttribute("cardType",queryModel.getCardType());
			model.addAttribute("cardId", cardId);
//			model.addAttribute("cusType",cardInfo.getCustomer().getCustomerType());
			model.addAttribute("cusType", customerInfo.getCustomerType());
			model.addAttribute("jhFlag", jhFlag);
			model.addAttribute("customerName", customerInfo.getCustomerName());
		}else {
			throw new ManagerException("此卡对应的用户信息不完整，请联系客服人员补全信息！");
		}
		return prefix + "edit";
	}

	private boolean jhCancelFlag(Model model, CardInfo cardInfo) {
		boolean jhFlag = false;
		//建行储值卡注销 只预注销
		if(null!=cardInfo) {
			String[] jhAgenId= {"52010102018","52010102002"};
			String agencyId = cardInfo.getAgencyId();
			List<String> agencyList = Arrays.asList(jhAgenId);
			for (String string : agencyList) {
				if(string.equals(agencyId)) {
					jhFlag=true;
				}
			}
		}
		return jhFlag;
	}

	@RequestMapping(value = "/edit", method = RequestMethod.POST)
	public String porcessEdit(@Valid @ModelAttribute("pageModel") CancelRequest queryModel, HttpServletRequest request, Model model,
			HttpServletResponse response) throws ManagerException
	{
		return prefix + "result";
	}
	/**
	 * 预注销
	 * @param queryModel
	 * @param response
	 * @param request
	 * @param model
	 * @throws ManagerException
	 */
	@RequestMapping(value = "/doPreCancel", method = RequestMethod.POST)
	public void doPreCancel(@Valid @RequestBody PreCancelRequest queryModel,HttpServletResponse response,HttpServletRequest request,Model model) throws ManagerException {
		
		AppCardStatusChangeResponse preCancelRes;
		try {
			queryModel.setSupplyOrCancel(true);
			preCancelRes = cancelManager.doPreCancel(queryModel,LoginHelper.getLoginUser(request));
			if(null!=preCancelRes.getOrderStatus()&&preCancelRes.getOrderStatus()==2) {
				CardInfo cardInfo = cancelManager.findById(queryModel.getCardId());
				super.doAddLog(request, CssServiceLogType.CUSTOMERSERVICE_CARD_CANCEL, cardInfo);
			}else if(queryModel.getProvider()==0&&preCancelRes.getStatus()==1) {
				CardInfo cardInfo = cancelManager.findById(queryModel.getCardId());
				super.doAddLog(request, CssServiceLogType.CUSTOMERSERVICE_CARD_CANCEL, cardInfo);
			}
			HttpMimeResponseHelper.responseJson(preCancelRes.toJson(), response);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ManagerException("卡注销失败，请联系管理员。");
		}
	}
	
	/**
	 * 销卡
	 * @param queryModel
	 * @param model
	 * @return
	 * @throws ManagerException 
	 */
	@RequestMapping(value = "/doCancel", method = RequestMethod.POST)
	public void doCancel(@Valid @RequestBody CancelRequest queryModel,HttpServletResponse response,HttpServletRequest request,Model model) throws ManagerException {
		
		CardCancelResponse cancelRes = null;
		queryModel.setSupplyOrCancel(true);
		CardInfo cardInfo = cancelManager.findById(queryModel.getCardId());
		boolean jhFlag = jhCancelFlag(model, cardInfo);
		queryModel.setJhFlag(jhFlag);
		try {
			cancelRes = cancelManager.doCancel(queryModel,LoginHelper.getLoginUser(request));
			super.doAddLog(request, CssServiceLogType.CUSTOMERSERVICE_CARD_CANCEL, cardInfo);
			HttpMimeResponseHelper.responseJson(cancelRes.toJson(), response);
		}catch (Exception e) {
			e.printStackTrace();
			throw new ManagerException("卡注销失败。请联系管理员");
		}
		
	}
	@RequestMapping(value="/fileUpload",method = RequestMethod.POST)
	@ResponseBody
	public void handleFileUpload(@RequestParam("file") MultipartFile[] file,@RequestParam("cardId") String cardId, HttpServletRequest request,HttpServletResponse response) throws IOException {
		CardCancelResponse cancelRes = null;
		if (0!=file.length) {
			cancelRes = cancelManager.saveFile(cardId,file);
			HttpMimeResponseHelper.responseJson(cancelRes.toJson(), response);
		}
	}
}

